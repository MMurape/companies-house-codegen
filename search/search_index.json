{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"companies-house-codegen","text":"<p>A simple but powerful toolkit for downloading, compressing and formatting Companies House OpenAPI (Swagger 2.0) specifications.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Companies House is an executive agency of the Department for Business and Trade, a department of the British Government. This official UK agency is responsible for incorperating and dissolving companies, and maintaining a register of information of limited companies (and some other companies) under the Companies Act and related legislation to be made available for public access.</p> <p>Companies House hosts a JSON REST API called the Companies House API, which makes it possible for software developers to create application to retrieve information from Companies House's database (e.g. searching and retrieving public company data), as well as, interact with Companies House's database (e.g. manipulating company information, givem you have authority to do so). The full documentation for Companies House API can be found at the Companies House Developer Hub.</p> <p>Unfortunately, the Companies House API does not come with an official SDK. Fortunately, the API is documented fully defined in OpenAPI (specifically Swagger 2.0) specifications - an open source standard for defining APIs. Since OpenAPI is industry standard there are many tools that exist that produce high quality SDKs from OpenAPI definitions. For example, Cloudflare, OpenAI, Anthropic and many define their SDKs in OpenAPI3 and generate them using Stainless. Unfortunately, these definitions are distributed amongst many files (i.e. the API is broken down into several smaller API products, with the Companies House Public Data API product by itself being distributed over 22 files!). Moreover, these definitions contain various errors that make them unusable.</p> <p>This small, configurable and simple tool fetches the OpenAPI for Companies House API, formats them to fix errors found in them.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#requirements","title":"Requirements","text":"<p><code>companies-house-codegen</code> requires Python 3.8+ and <code>typing-extensions</code>. You may also, optionally, install pydantic for additional typesafety.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>pip</code> is the default package installer for Python, enabling easy installation and management of packages from the Python Package Index (PyPI) and from Version Control System (VCS) sources via the command line.</p> <p>Tip</p> <p>The methods described work for other package manegers like <code>uv</code> and <code>poetry</code></p>"},{"location":"#install-from-pypi","title":"Install From PyPI","text":"<p>To this package from PyPI, run:</p> <pre><code>pip install companies-house-codegen\n</code></pre>"},{"location":"#install-from-github-using-vcs-support","title":"Install From Github (Using VCS Support)","text":"<p>To install from latest version of this Github repo use:</p> <pre><code>pip install git+https://github.com/MMurape/companies-house-codegen.git@main\n</code></pre> <p>Tip</p> <p>See <code>pip</code>'s documentation VCS Support for more infomation. Note, that most modern package managers also come with VCS support similar to <code>pip</code>.</p>"},{"location":"#install-from-a-git-clone-using-a-clone-of-this-repo","title":"Install From A Git Clone (Using a clone of this repo)","text":"<p>To install this repository from a git clone, perform the following steps:</p> <ol> <li>Clone this repository.</li> <li> <p>After clone this repository, the run the following command:</p> <pre><code>cd companies-house-codegen # change directory to this repository\n</code></pre> </li> <li> <p>Install the package using package manager of your choice:</p> <pre><code>pip install .\n</code></pre> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>This toolkit can either be used as a command-line interface - <code>companies-house-codegen</code> - or as a python module - <code>companies_house_codegen</code>.</p> <p>For more information on command-line interface see: API Reference.</p> <p>For more information on command-line interface see: CLI Reference.</p>"},{"location":"#example-download-companies-house-public-data-api-and-convert-it-to-openapi-301","title":"Example: Download Companies House Public Data API and convert it to OpenAPI 3.0.1","text":"<p>As a simple example of usage, here is how you could download the OpenAPI (Swagger 2.0) specification for Companies House Public Data API and convert it to OpenAPI 3.0.1.</p>"},{"location":"#using-the-cli","title":"Using the CLI","text":"<pre><code># Download Companies House Public Data API and convert it to OpenAPI 3.0.1\ncompanies-house-codegen -i https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/swagger.json --zip public_data_api_openapi.yml --openapi\n</code></pre>"},{"location":"#using-the-library","title":"Using the library","text":"<pre><code>from companies_house_codegen.codegen import download_openapi\nfrom companies_house_codegen.utils import mapping_representer\nimport yaml\nfrom yaml import CDumper\n\npublic_data_api_openapi = download_openapi('https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/swagger.json')\nwith open('public_data_api_openapi.yml', 'w') as f:\n    # yaml does not know how to dump special an Mappings like OrderedDict.\n    CDumper.add_representer(OrderedDict, mapping_representer)\n    yaml.dump(m, f, indent=2, sort_keys=False, Dumper=CDumper) # save yaml\n</code></pre>"},{"location":"command-line-interface/","title":"Command-line Interface","text":"<p>Once you have installed <code>companies-house-codegen</code>, run the following:</p> <pre><code>companies-house-codegen --help\n</code></pre> <p>This will show you the help menu for the command; it will show you what options are available to you and how to use them</p> <pre><code>usage: companies-house-codegen [OPTIONS]\n\nGenerate, format and host OpenAPI specifications and for Companies House\n\noptions:\n  -h, --help            show this help message and exit\n  --version, -V         Show version and exit.\n\nInput options:\n  --input URL, -i URL   URL of a Companies House Swagger Specification from the Companies House       \n                        Developer's API Suite. See: companies_house_codegen.constants.CHOAS or        \n                        https://developer-specs.company-information.service.gov.uk for more info.     \n  --select [RULE ...]   Space-separated list of rule codes to enable. See,\n                        companies_house_codegen.constants.ReFormatFlags for more info on available    \n                        flags.\n  --ignore [RULE ...]   Space-separated list of rule codes to disable. Note, ignored rules have       \n                        higher priority than slected rules from `--select` flag. See,\n                        companies_house_codegen.constants.ReFormatFlags for more info on available    \n                        flags.\n\nOutput and formatting options:\n  --extract DIR, -e DIR\n                        When specified, save specification files as to a directory.\n  --zip FILE, -z FILE   Output as single file. Outputs as to stdout otherwise\n  --openapi             Convert Swagger specification to OpenAPI.\n  --serve [IP:PORT]     When specified, creates a local HTTP server. By default, serves on\n                        127.0.0.1:10000. This can be overidden by passing an argument argument        \n                        &lt;IP:PORT&gt; is passed\n\nDebugging options:\n  --silent, -s          Stop emitting all non-critical output. Error messages will still be emitted   \n                        (which can silenced by 2&gt;/dev/null).\n  --single-threaded     Download syncronously on a single thread. By default, downloads syncronously  \n                        using multithreading. Useful for debugging.\n  --diff                Logs the difference between pre and post formatting. Note, will be ignored    \n                        if the `--silent` flag is passed.\n  --verbose, -v         Use verbose debug logging\n</code></pre> <p>Here is an example use case</p> <pre><code># Download Companies House Public Data API and convert it to OpenAPI 3.0.1\ncompanies-house-codegen -i https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/swagger.json --zip public_data_api_openapi.yml --openapi\n</code></pre> <p>Tip</p> <p>For more information, see argument in API Reference.</p>"},{"location":"license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) 2025 Munyaradzi Murape</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#companies_house_codegen","title":"companies_house_codegen","text":"<p>Modules:</p> <ul> <li> <code>argument</code>           \u2013            <p>The argument parser used by main.py</p> </li> <li> <code>codegen</code>           \u2013            <p>Code formatting and generation</p> </li> <li> <code>constants</code>           \u2013            <p>Important constants for related to codegen</p> </li> <li> <code>types</code>           \u2013            <p>Typings for codegen.</p> </li> <li> <code>utils</code>           \u2013            <p>Utilities for codegen.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>main</code>             \u2013              <p>The command-line interface for <code>companies_house_codegen</code> programme.</p> </li> <li> <code>void_main</code>             \u2013              <p>The command-line interface for <code>companies_house_codegen</code> programme.</p> </li> </ul>"},{"location":"api-reference/#companies_house_codegen.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre> <p>Logger for companies_house_codegen</p>"},{"location":"api-reference/#companies_house_codegen.main","title":"main","text":"<pre><code>main(args: Sequence[str] | None = None) -&gt; ExitCode\n</code></pre> <p>The command-line interface for <code>companies_house_codegen</code> programme.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>exit_code</code> (              <code>int</code> )          \u2013            <p>An integer representing how the programme exited.</p> </li> </ul> See Also <p><code>ExitCode</code>: Exit code for the main function</p>"},{"location":"api-reference/#companies_house_codegen.main(args)","title":"<code>args</code>","text":"(<code>Sequence[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>sequence of command line arguements. If not passed, gets commandline arguments from <code>sys.argv</code></p>"},{"location":"api-reference/#companies_house_codegen.void_main","title":"void_main","text":"<pre><code>void_main(args: Sequence[str] | None = None) -&gt; None\n</code></pre> <p>The command-line interface for <code>companies_house_codegen</code> programme.</p> <p>Parameters:</p>"},{"location":"api-reference/#companies_house_codegen.void_main(args)","title":"<code>args</code>","text":"(<code>Sequence[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>sequence of command line arguements. If not passed, gets commandline arguments from <code>sys.argv</code></p>"},{"location":"api-reference/argument/","title":"argument","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument","title":"argument","text":"<p>The argument parser used by main.py</p> <p>Classes:</p> Name Description <code>CLIArgumentParser</code> <p>Argument parser for commandline interface.</p> <code>CLINamespace</code> <p>Typings for namespace of <code>companies-house-codegen</code> command-line interface.</p>"},{"location":"api-reference/argument/#companies_house_codegen.argument.CLIArgumentParser","title":"CLIArgumentParser","text":"<pre><code>CLIArgumentParser()\n</code></pre> <p>Argument parser for commandline interface.</p>"},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace","title":"CLINamespace  <code>dataclass</code>","text":"<pre><code>CLINamespace(input: str, select: Sequence[ReFormatFlags] = (TYPE_DATE_TO_STRING, TYPE_LIST_TO_ARRAY, TYPE_INFER_BOOLEANS, TYPE_ARRAY_ENSURE_ITEMS, PATHS_ENSURE_SNAKECASE, PARAM_PARAMTYPE_TO_IN, PARAM_TITLE_TO_NAME), ignore: Sequence[ReFormatFlags] = (), extract: Path | None = None, zip: IO[str] = stdout, openapi: bool = False, serve: tuple[str, int] | None = None, silent: bool = False, threaded: bool = True, diff: bool = False, verbose: bool = False)\n</code></pre> <p>Typings for namespace of <code>companies-house-codegen</code> command-line interface.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>URL of a Companies House Swagger Specification from the Companies House Developer's API Suite. See: companies_house_codegen.constants.CHOAS or https://developer-specs.company-information.service.gov.uk for more info.</p> required <code>Sequence[ReFormatFlags]</code> <p>Space-separated list of rule codes to enable. See, companies_house_codegen.constants.ReFormatFlags for more info on available flags.</p> <code>(TYPE_DATE_TO_STRING, TYPE_LIST_TO_ARRAY, TYPE_INFER_BOOLEANS, TYPE_ARRAY_ENSURE_ITEMS, PATHS_ENSURE_SNAKECASE, PARAM_PARAMTYPE_TO_IN, PARAM_TITLE_TO_NAME)</code> <code>Sequence[ReFormatFlags]</code> <p>Space-separated list of rule codes to disable. Note, ignored rules have higher priority than slected rules from <code>--select</code> flag. See, companies_house_codegen.constants.ReFormatFlags for more info on available flags.</p> <code>()</code> <code>Path | None</code> <p>When specified, save specification files as to a directory.</p> <code>None</code> <code>IO[str]</code> <p>Output as single file. Outputs as to stdout otherwise</p> <code>stdout</code> <code>bool</code> <p>Convert Swagger specification to OpenAPI.</p> <code>False</code> <code>tuple[str, int] | None</code> <p>When specified, creates a local HTTP server. By default, serves on 127.0.0.1:10000. This can be overidden by passing an argument argument  is passed <code>None</code> <code>bool</code> <p>Stop emitting all non-critical output. Error messages will still be emitted (which can silenced by 2&gt;/dev/null).</p> <code>False</code> <code>bool</code> <p>Download syncronously on a single thread. By default, downloads syncronously using multithreading. Useful for debugging.</p> <code>True</code> <code>bool</code> <p>Logs the difference between pre and post formatting. Note, will be ignored if the <code>--silent</code> flag is passed.</p> <code>False</code> <code>bool</code> <p>Use verbose debug logging</p> <code>False</code> Notes <p>Generated using <code>generate_namespace_typing&lt;https://mmurape.github.io/companies-house-codegen/developement/typings_suite/#typings_suite.generate_cli_ns&gt;</code>_</p> See Also <p>https://mmurape.github.io/companies-house-codegen/developement/typings_suite/#typings_suite.generate_cli_ns</p>"},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(input)","title":"<code>input</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(select)","title":"<code>select</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(ignore)","title":"<code>ignore</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(extract)","title":"<code>extract</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(zip)","title":"<code>zip</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(openapi)","title":"<code>openapi</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(serve)","title":"<code>serve</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(silent)","title":"<code>silent</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(threaded)","title":"<code>threaded</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(diff)","title":"<code>diff</code>","text":""},{"location":"api-reference/argument/#companies_house_codegen.argument.CLINamespace(verbose)","title":"<code>verbose</code>","text":""},{"location":"api-reference/codegen/","title":"codegen","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen","title":"codegen","text":"<p>Code formatting and generation</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.Downloaders","title":"Downloaders","text":"<p>List of available methods for downloading Companies House Swagger Specifications.</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_folder","title":"download_folder","text":"<pre><code>download_folder(url: CHOASType | str, threaded: bool = True, flags: ReFormatFlags | None = SELECT_ALL_FORMAT_FLAGS, diff: bool = False) -&gt; SchemaFolder\n</code></pre> <p>Downloads a Comapanies House Swagger specification folder and formats each file in it.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>the URL to download the API.</p> required <code>bool</code> <p>If True then will use multithreading to download the API.</p> <p>NOTE: On my machine this increased the speed of the download process by         between 4 and 5 times.</p> <code>True</code> <code>ReFormatFlags | None</code> <p>selects various formatting rules. Default <code>companies_house_codegen.constants.SELECT_ALL_FORMAT_FLAGS</code>.</p> <code>SELECT_ALL_FORMAT_FLAGS</code> <code>bool</code> <p>If True, logs the difference between pre and post formatting to stderr at INFO level logging. Default False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>folder</code> <code>SchemaFolder</code> <p>A dictionary mapping Remote JSON Reference paths (as strings) to dictionariess representing JSON data.</p> Also See <p>reformat_swagger : Reformats Companies House Swagger 2.0 specifications (in-place)     and returns refs defined in the schema. CHOAS: enum of available Swagger 2.0 specfications.</p> <p>Raises:</p> Type Description <code>HTTPError</code> <p>If a bad HTTP request occurs</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_folder(url)","title":"<code>url</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_folder(threaded)","title":"<code>threaded</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_folder(flags)","title":"<code>flags</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_folder(diff)","title":"<code>diff</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_swagger","title":"download_swagger","text":"<pre><code>download_swagger(url: CHOASType, threaded: bool = True, flags: ReFormatFlags | None = SELECT_ALL_FORMAT_FLAGS, diff: bool = False) -&gt; JSONSchema\n</code></pre> <p>Downloads a Companies House Swagger specification.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>the URL to download the API.</p> required <code>bool</code> <p>If True then will use multithreading to download the API.</p> <p>NOTE: On my machine this increased the speed of the download process by         between 4 and 5 times.</p> <code>True</code> <code>ReFormatFlags | None</code> <p>selects various formatting rules. Default <code>companies_house_codegen.constants.SELECT_ALL_FORMAT_FLAGS</code>.</p> <code>SELECT_ALL_FORMAT_FLAGS</code> <code>bool</code> <p>If True, logs the difference between pre and post formatting to stderr at INFO level logging. Default False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>swagger</code> <code>JSONSchema</code> <p>A Companies House Swagger specification</p> <p>Raises:</p> Type Description <code>HTTPError</code> <p>If a bad HTTP request occurs</p> See Also <p>download_folder : Downloads a Comapanies House Swagger specification folder. zip_folder : Zips/compresses/packages a folder of Companies House Swagger              specifications into a single Swagger specification.</p> Notes <p>A composite function of <code>zip_folder</code> and <code>download_folder</code>.</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_swagger(url)","title":"<code>url</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_swagger(threaded)","title":"<code>threaded</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_swagger(flags)","title":"<code>flags</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_swagger(diff)","title":"<code>diff</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_openapi","title":"download_openapi","text":"<pre><code>download_openapi(url: CHOASType, threaded: bool = True, flags: ReFormatFlags | None = SELECT_ALL_FORMAT_FLAGS, diff: bool = False) -&gt; JSONSchema\n</code></pre> <p>Convenient helper function for downloading a Companies House Swagger schema and converting it to</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>the URL to download the API.</p> required <code>bool</code> <p>If True then will use multithreading to download the API.</p> <p>NOTE: On my machine this increased the speed of the download process by         between 4 and 5 times.</p> <code>True</code> <code>ReFormatFlags | None</code> <p>selects various formatting rules. Default <code>companies_house_codegen.constants.SELECT_ALL_FORMAT_FLAGS</code>.</p> <code>SELECT_ALL_FORMAT_FLAGS</code> <code>bool</code> <p>If True, logs the difference between pre and post formatting to stderr at INFO level logging. Default False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>openapi</code> <code>JSONSchema</code> <p>A OpenAPI 3.0.1 specification for a Companies House API.</p> <p>Raises:</p> Type Description <code>HTTPError</code> <p>If a bad HTTP request occurs</p> See Also <p>swagger_converter : Converts a 1.x or 2.x Swagger definition                     to the OpenAPI 3.0.1 format. download_swagger : Downloads a Companies House Swagger specification.</p> Notes <p>A composite function of <code>swagger_converter</code> and <code>download_swagger</code>.</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_openapi(url)","title":"<code>url</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_openapi(threaded)","title":"<code>threaded</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_openapi(flags)","title":"<code>flags</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.download_openapi(diff)","title":"<code>diff</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.Formatters","title":"Formatters","text":"<p>List of format converters and linters for Companies House Swagger specifications.</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.reformat_swagger","title":"reformat_swagger","text":"<pre><code>reformat_swagger(swagger: JSONSchema, remote_path: RemoteJsonRefPathStr, host: str = COMPANIES_HOUSE_HOST, scheme: URLSchemeType = HTTPS, flags: ReFormatFlags | None = SELECT_ALL_FORMAT_FLAGS, diff: bool = False) -&gt; list[SplitResult]\n</code></pre> <p>Reformats Companies House Swagger 2.0 specifications (in-place) and returns refs defined in the schema.</p> <p>Parameters:</p> Name Type Description Default <code>JSONSchema</code> <p>A Companies House Swagger schema</p> required <code>RemoteJsonRefPathStr</code> <p>Represents the part of a Remote JSON reference as described in <code>Using $ref | Swagger Docs &lt;https://swagger.io/docs/specification/v3_0/using-ref&gt;</code>_.</p> required <code>str</code> <p>The host name that overrides the feedback adress. Default <code>'developer-specs.company-information.service.gov.uk'</code>.</p> <code>COMPANIES_HOUSE_HOST</code> <code>URLSchemeType</code> <p>The scheme that will be used for http request Default <code>'https'</code>.</p> <code>HTTPS</code> <code>ReFormatFlags | None</code> <p>selects various formatting rules. Default <code>companies_house_codegen.constants.SELECT_ALL_FORMAT_FLAGS</code>.</p> <code>SELECT_ALL_FORMAT_FLAGS</code> <code>bool</code> <p>If True, logs the difference between pre and post formatting to stderr at INFO level logging. Default False.</p> <code>False</code> Notes <p>This function acts in-place.</p> <p>Returns:</p> Name Type Description <code>refs</code> <code>SplitResult</code> <p>All references defined in the schema</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.reformat_swagger(swagger)","title":"<code>swagger</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.reformat_swagger(remote_path)","title":"<code>remote_path</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.reformat_swagger(host)","title":"<code>host</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.reformat_swagger(scheme)","title":"<code>scheme</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.reformat_swagger(flags)","title":"<code>flags</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.reformat_swagger(diff)","title":"<code>diff</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.zip_folder","title":"zip_folder","text":"<pre><code>zip_folder(folder: SchemaFolder, remote_path: RemoteJsonRefPathStr) -&gt; JSONSchema\n</code></pre> <p>Zips/compresses/packages folder of Companies House Swagger specifications into a single Swagger specification.</p> <p>Parameters:</p> Name Type Description Default <code>SchemaFolder</code> <p>A dictionary mapping Remote JSON Reference paths (as strings) to dictionaries reprenting JSON data.</p> required <code>RemoteJsonRefPathStr</code> <p>the path the where the main <code>swagger.json</code> file is stored with <code>folder</code></p> required <p>Returns:</p> Name Type Description <code>swagger</code> <code>JSONSchema</code> <p>A Companies House Swagger specification</p> Notes <p>Due to difference in parsing strategy this procedure will not yield the same result as what you would get by parsing the folder through version of the <code>swagger-codegen-cli &lt;https://github.com/swagger-api/swagger-codegen&gt;</code>_</p> <p>The differences are as follows * This procedure will cull all unused defintions * This procedure will not change the defintion of schemas objects   produce the same result as if you   - JSON schemas will be fully resolved</p> See Also <p>download_folder : downloads a Companies House Swagger specification folder swagger_converter : Converts Swagger schemas to OpenAPI</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.zip_folder(folder)","title":"<code>folder</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.zip_folder(remote_path)","title":"<code>remote_path</code>","text":""},{"location":"api-reference/codegen/#companies_house_codegen.codegen.swagger_converter","title":"swagger_converter","text":"<pre><code>swagger_converter(swagger: JSONSchema) -&gt; JSONSchema\n</code></pre> <p>Converts a 1.x or 2.x Swagger definition to the OpenAPI 3.0.1 format.</p> <p>Parameters:</p> Name Type Description Default <code>JSONSchema</code> <p>A Companies House Swagger specification</p> required <p>Returns:</p> Name Type Description <code>openapi</code> <code>JSONSchema</code> <p>A OpenAPI 3.0.1 specification.</p> See Also <p>zip_folder : Zips/compresses/packages folder of Companies House Swagger              specifications into a single Swagger specification. Swagger Converter : https://converter.swagger.io/api/openapi.json</p> Notes <p>This a wrapper for the <code>Swagger Converter&lt;https://converter.swagger.io/api/openapi.json&gt;</code>_ API</p> <p>Raises:</p> Type Description <code>HTTPError</code> <p>If a bad HTTP request occurs</p> <code>ValueError</code> <p>if scheme is malformed</p> <code>NotImplementationError</code> <p>if attempting to pass a fragment of a scheme</p>"},{"location":"api-reference/codegen/#companies_house_codegen.codegen.swagger_converter(swagger)","title":"<code>swagger</code>","text":""},{"location":"api-reference/constants/","title":"constants","text":""},{"location":"api-reference/constants/#companies_house_codegen.constants","title":"constants","text":"<p>Important constants for related to codegen</p> <p>Classes:</p> Name Description <code>CHOAS</code> <p>Enum of available</p> <code>ExitCode</code> <p>Exit codes related to the main function.</p> <code>ReFormatFlags</code> <p>Flags for formatting.</p> <code>URLScheme</code> <p>Enum of URL schemes supported by codegen.</p> <p>Attributes:</p> Name Type Description <code>COMPANIES_HOUSE_HOST</code> <p>developer-specs.company-information.service.gov.uk is the </p> <code>COMPANIES_HOUSE_PORT</code> <p>Port 10000 is used by Companies House for transmitting web data</p> <code>LOCALHOST_IP</code> <p>127.0.0.1 is known as the loopback address or localhost,</p> <code>LOOPBACK_ADDR</code> <p>http://127.0.0.1:10000 is the url (loopback address) used by Companies House</p> <code>RE_REMOTE_JSON_REF_PATH</code> <p>Regex pattern for Remote JSON</p> <code>RE_URL</code> <p>Regex pattern of an http/https/ftp/ftps url.</p> <code>SELECT_ALL_FORMAT_FLAGS</code> <p>Union off all FormatFlags.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ALLOWED_TYPES","title":"ALLOWED_TYPES  <code>module-attribute</code>","text":"<pre><code>ALLOWED_TYPES = frozenset(('string', 'number', 'boolean', 'integer', 'array'))\n</code></pre> <p>The primitive data types allowed in the  <code>Swagger Specification &lt;https://swagger.io/specification/v2/#data-types&gt;</code>_</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.COMPANIES_HOUSE_HOST","title":"COMPANIES_HOUSE_HOST  <code>module-attribute</code>","text":"<pre><code>COMPANIES_HOUSE_HOST = 'developer-specs.company-information.service.gov.uk'\n</code></pre> <p>developer-specs.company-information.service.gov.uk is the  <code>host&lt;https://www.rfc-editor.org/rfc/rfc3986#section-3.2.2&gt;</code>_ name of  companies house Developer's API suite (where Specifactions are hosted)</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.COMPANIES_HOUSE_PORT","title":"COMPANIES_HOUSE_PORT  <code>module-attribute</code>","text":"<pre><code>COMPANIES_HOUSE_PORT = 10000\n</code></pre> <p>Port 10000 is used by Companies House for transmitting web data over the localhost network using the Hypertext Transfer Protocol (HTTP)</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.LOCALHOST_IP","title":"LOCALHOST_IP  <code>module-attribute</code>","text":"<pre><code>LOCALHOST_IP = '127.0.0.1'\n</code></pre> <p>127.0.0.1 is known as the loopback address or localhost, which is used for testing applications on the same device without needing an internet connection. It allows a computer to communicate with itself for various tasks.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.LOOPBACK_ADDR","title":"LOOPBACK_ADDR  <code>module-attribute</code>","text":"<pre><code>LOOPBACK_ADDR = f'http://{LOCALHOST_IP}:{COMPANIES_HOUSE_PORT}'\n</code></pre> <p>http://127.0.0.1:10000 is the url (loopback address) used by Companies House for testing API applications on the same device without needing an internet connection. It allows a computer to communicate with itself for various tasks.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.RE_REMOTE_JSON_REF_PATH","title":"RE_REMOTE_JSON_REF_PATH  <code>module-attribute</code>","text":"<pre><code>RE_REMOTE_JSON_REF_PATH = compile('^(?:/?|[/?]\\\\S+)\\\\.(?:json|ya?ml)$', IGNORECASE)\n</code></pre> <p>Regex pattern for Remote JSON</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.RE_SERVER_ADDR","title":"RE_SERVER_ADDR  <code>module-attribute</code>","text":"<pre><code>RE_SERVER_ADDR = compile('(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\\\.)+(?:[A-Z]{2,6}\\\\.?|[A-Z0-9-]{2,}\\\\.?)|localhost|\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3})(?::\\\\d+)?', IGNORECASE)\n</code></pre> <p>Regex pattern for server address ."},{"location":"api-reference/constants/#companies_house_codegen.constants.RE_URL","title":"RE_URL  <code>module-attribute</code>","text":"<pre><code>RE_URL = compile('^(?:http|ftp)s?://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\\\.)+(?:[A-Z]{2,6}\\\\.?|[A-Z0-9-]{2,}\\\\.?)|localhost|\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3})(?::\\\\d+)?(?:/?|[/?]\\\\S+)\\\\Z', IGNORECASE)\n</code></pre> <p>Regex pattern of an http/https/ftp/ftps url.</p> See Also <p>https://github.com/django/django/blob/stable/1.4.x/django/core/validators.py#L47</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.SELECT_ALL_FORMAT_FLAGS","title":"SELECT_ALL_FORMAT_FLAGS  <code>module-attribute</code>","text":"<pre><code>SELECT_ALL_FORMAT_FLAGS = TYPE_DATE_TO_STRING | TYPE_ARRAY_ENSURE_ITEMS | PATHS_ENSURE_SNAKECASE | TYPE_LIST_TO_ARRAY | PARAM_TITLE_TO_NAME | PARAM_PARAMTYPE_TO_IN\n</code></pre> <p>Union off all FormatFlags.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS","title":"CHOAS","text":"<p>Enum of available Companies House OpenAPI (Swagger 2.0) Specfications.</p> See Also <p><code>Companies House Developer's API suite&lt;https://developer-specs.company-information.service.gov.uk&gt;</code>_</p> <p>Attributes:</p> Name Type Description <code>DISCREPANCIES</code> <p>For use only by Obliged Entities to report PSC Discrepancies</p> <code>DOCUMENT_API</code> <p>API suite providing company filing history document metadata and downloads.</p> <code>IDENTITY_SERVICE</code> <p>Companies House identity and authentication service.</p> <code>MANIPULATE_COMPANY_DATA</code> <p>An API suite that allows clients to manipulate company information,</p> <code>PUBLIC_DATA_API</code> <p>An API suite providing read only access to search and retrieve public company data</p> <code>SANDBOX_TEST_DATA_GENERATOR_API</code> <p>Sandbox API suite to generate test data on demand</p> <code>STREAMING_API</code> <p>A streaming API giving access to real time data changes.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS.DISCREPANCIES","title":"DISCREPANCIES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISCREPANCIES = 'https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/pscDiscrepancies.json'\n</code></pre> <p>For use only by Obliged Entities to report PSC Discrepancies</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS.DOCUMENT_API","title":"DOCUMENT_API  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOCUMENT_API = 'https://developer-specs.company-information.service.gov.uk/document.api.ch.gov.uk-specifications/swagger-2.0/spec/swagger.json'\n</code></pre> <p>API suite providing company filing history document metadata and downloads.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS.IDENTITY_SERVICE","title":"IDENTITY_SERVICE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IDENTITY_SERVICE = 'https://developer-specs.company-information.service.gov.uk/account.ch.gov.uk-specifications/swagger-2.0/identity-public.json'\n</code></pre> <p>Companies House identity and authentication service.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS.MANIPULATE_COMPANY_DATA","title":"MANIPULATE_COMPANY_DATA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MANIPULATE_COMPANY_DATA = 'https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/filings-public.json'\n</code></pre> <p>An API suite that allows clients to manipulate company information, if they have authority to do so.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS.PUBLIC_DATA_API","title":"PUBLIC_DATA_API  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PUBLIC_DATA_API = 'https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/swagger.json'\n</code></pre> <p>An API suite providing read only access to search and retrieve public company data</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS.SANDBOX_TEST_DATA_GENERATOR_API","title":"SANDBOX_TEST_DATA_GENERATOR_API  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SANDBOX_TEST_DATA_GENERATOR_API = 'https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/testDataGenerator.json'\n</code></pre> <p>Sandbox API suite to generate test data on demand</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.CHOAS.STREAMING_API","title":"STREAMING_API  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STREAMING_API = 'https://developer-specs.company-information.service.gov.uk/api.ch.gov.uk-specifications/swagger-2.0/spec/streaming.json'\n</code></pre> <p>A streaming API giving access to real time data changes.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ExitCode","title":"ExitCode","text":"<p>Exit codes related to the main function.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags","title":"ReFormatFlags","text":"<p>Flags for formatting.</p> See Also <p>reformat_swagger: Reformats Companies House Swagger 2.0 specifications (in-place)     and returns refs defined in the schema.</p> <p>Attributes:</p> Name Type Description <code>PARAM_PARAMTYPE_TO_IN</code> <p>Convert <code>parameters&lt;paramType&gt;</code> to <code>parameters&lt;in&gt;</code> and delete the <code>paramType</code> key.</p> <code>PARAM_TITLE_TO_NAME</code> <p>Convert <code>parameters[_]&lt;title&gt;</code> to <code>parameters[_]&lt;name&gt;</code> and delete the <code>title</code> key.</p> <code>PATHS_ENSURE_SNAKECASE</code> <p>Ensure that path parameters use snakecase.</p> <code>TYPE_ARRAY_ENSURE_ITEMS</code> <p>Ensure that <code>items</code> attribute is in array.</p> <code>TYPE_DATE_TO_STRING</code> <p>Convert instances of <code>type&lt;date&gt;</code> to <code>type&lt;string(format=\"date\")&gt;</code></p> <code>TYPE_INFER_BOOLEANS</code> <p>Infers if type is a boolean.</p> <code>TYPE_LIST_TO_ARRAY</code> <p>Convert instance of <code>type&lt;list&gt;</code> to <code>type&lt;array(item='string')&gt;</code></p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags.PARAM_PARAMTYPE_TO_IN","title":"PARAM_PARAMTYPE_TO_IN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAM_PARAMTYPE_TO_IN = auto()\n</code></pre> <p>Convert <code>parameters&lt;paramType&gt;</code> to <code>parameters&lt;in&gt;</code> and delete the <code>paramType</code> key.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags.PARAM_TITLE_TO_NAME","title":"PARAM_TITLE_TO_NAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PARAM_TITLE_TO_NAME = auto()\n</code></pre> <p>Convert <code>parameters[_]&lt;title&gt;</code> to <code>parameters[_]&lt;name&gt;</code> and delete the <code>title</code> key.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags.PATHS_ENSURE_SNAKECASE","title":"PATHS_ENSURE_SNAKECASE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PATHS_ENSURE_SNAKECASE = auto()\n</code></pre> <p>Ensure that path parameters use snakecase.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags.TYPE_ARRAY_ENSURE_ITEMS","title":"TYPE_ARRAY_ENSURE_ITEMS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_ARRAY_ENSURE_ITEMS = auto()\n</code></pre> <p>Ensure that <code>items</code> attribute is in array.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags.TYPE_DATE_TO_STRING","title":"TYPE_DATE_TO_STRING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_DATE_TO_STRING = auto()\n</code></pre> <p>Convert instances of <code>type&lt;date&gt;</code> to <code>type&lt;string(format=\"date\")&gt;</code></p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags.TYPE_INFER_BOOLEANS","title":"TYPE_INFER_BOOLEANS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_INFER_BOOLEANS = auto()\n</code></pre> <p>Infers if type is a boolean.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.ReFormatFlags.TYPE_LIST_TO_ARRAY","title":"TYPE_LIST_TO_ARRAY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TYPE_LIST_TO_ARRAY = auto()\n</code></pre> <p>Convert instance of <code>type&lt;list&gt;</code> to <code>type&lt;array(item='string')&gt;</code></p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.URLScheme","title":"URLScheme","text":"<p>Enum of URL schemes supported by codegen.</p> <p>Attributes:</p> Name Type Description <code>FTP</code> <p><code>FTP&lt;https://datatracker.ietf.org/doc/html/rfc114&gt;</code>_</p> <code>FTPS</code> <p><code>FTPS&lt;https://en.wikipedia.org/wiki/FTPS&gt;</code>_</p> <code>HTTP</code> <p><code>HTTP&lt;https://datatracker.ietf.org/doc/html/rfc9110&gt;</code>_</p> <code>HTTPS</code> <p><code>HTTPS&lt;https://en.wikipedia.org/wiki/HTTPS&gt;</code>_ </p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.URLScheme.FTP","title":"FTP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FTP = 'ftp'\n</code></pre> <p><code>FTP&lt;https://datatracker.ietf.org/doc/html/rfc114&gt;</code>_ (File Transfer Protocol) is a standardized way of transfering files between computers on a network.</p> <p>TODO: ftp support</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.URLScheme.FTPS","title":"FTPS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FTPS = 'ftps'\n</code></pre> <p><code>FTPS&lt;https://en.wikipedia.org/wiki/FTPS&gt;</code> (File Transfer Protocol (FTP) Secure) is an extension of FTP that uses <code>TLS&lt;https://en.wikipedia.org/wiki/Transport_Layer_Security&gt;</code> (Transport Layer Security) to secure communications over a computer network, making it safer for transferring sensitive files. </p> <p>TODO: Implement https://stackoverflow.com/a/73171311</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.URLScheme.HTTP","title":"HTTP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HTTP = 'http'\n</code></pre> <p><code>HTTP&lt;https://datatracker.ietf.org/doc/html/rfc9110&gt;</code> (Hypertext Transfer Protocol) is a stateless application protocol in the <code>Internet protocol suite&lt;https://en.wikipedia.org/wiki/Internet_protocol_suite&gt;</code> for distributed, collaborative, hypertext information systems.</p>"},{"location":"api-reference/constants/#companies_house_codegen.constants.URLScheme.HTTPS","title":"HTTPS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HTTPS = 'https'\n</code></pre> <p><code>HTTPS&lt;https://en.wikipedia.org/wiki/HTTPS&gt;</code>_  (Hypertext Transfer Protocol Secure) is an extension of HTTP that uses encryption to secure communications over a computer network,  making it safer for transmitting sensitive data.  This ensures protect user privacy and data integrity during online transactions over the internet.</p>"},{"location":"api-reference/types/","title":"types","text":""},{"location":"api-reference/types/#companies_house_codegen.types","title":"types","text":"<p>Typings for codegen.</p> <p>Classes:</p> Name Description <code>CLINamespace</code> <p>Typings for namespace of <code>companies-house-codegen</code> command-line interface.</p> <p>Functions:</p> Name Description <code>validate_call</code> <p>If pydantic is installed, returns <code>pydantic.validate_call(func)</code>,</p> <p>Attributes:</p> Name Type Description <code>CHOASType</code> <p>A URL point to any </p> <code>JSONSchema</code> <p>Abstration of a JSON schema using.</p> <code>RemoteJsonRefPathStr</code> <p>Represents the part of a Remote JSON reference as described in </p> <code>SchemaFolder</code> <p>Abstration of a folder containing Schemas.</p> <code>URLSchemeType</code> <p>A valid url scheme supported by codegen.</p>"},{"location":"api-reference/types/#companies_house_codegen.types.CHOASType","title":"CHOASType  <code>module-attribute</code>","text":"<pre><code>CHOASType = Union[CHOAS, Literal['https://developer-specs.company-information.service.gov.uk/companies-house-identity-service/reference', 'https://developer-specs.company-information.service.gov.uk/companies-house-public-data-api/reference', 'https://developer-specs.company-information.service.gov.uk/discrepancies/reference', 'https://developer-specs.company-information.service.gov.uk/document-api/reference', 'https://developer-specs.company-information.service.gov.uk/manipulate-company-data-api-filing/reference', 'https://developer-specs.company-information.service.gov.uk/sandbox-test-data-generator-api/reference', 'https://developer-specs.company-information.service.gov.uk/streaming-api/reference']]\n</code></pre> <p>A URL point to any  Companies House OpenAPI (Swagger 2.0) Specfication.</p> See Also <p><code>CHOAS</code>: enum of available Swagger 2.0 specfications.</p>"},{"location":"api-reference/types/#companies_house_codegen.types.JSONSchema","title":"JSONSchema  <code>module-attribute</code>","text":"<pre><code>JSONSchema = OrderedDict[str, Any]\n</code></pre> <p>Abstration of a JSON schema using.</p>"},{"location":"api-reference/types/#companies_house_codegen.types.RemoteJsonRefPathStr","title":"RemoteJsonRefPathStr  <code>module-attribute</code>","text":"<pre><code>RemoteJsonRefPathStr = str\n</code></pre> <p>Represents the part of a Remote JSON reference as described in  <code>Using $ref | Swagger Docs &lt;https://swagger.io/docs/specification/v3_0/using-ref&gt;</code>_.</p>"},{"location":"api-reference/types/#companies_house_codegen.types.SchemaFolder","title":"SchemaFolder  <code>module-attribute</code>","text":"<pre><code>SchemaFolder = MutableMapping[RemoteJsonRefPathStr, JSONSchema]\n</code></pre> <p>Abstration of a folder containing Schemas.</p> <p>A dictionary mapping Remote JSON Reference file paths (as strings) to dicts representing JSON data.</p>"},{"location":"api-reference/types/#companies_house_codegen.types.URLSchemeType","title":"URLSchemeType  <code>module-attribute</code>","text":"<pre><code>URLSchemeType = Union[URLScheme, Literal['http', 'https', 'ftp', 'ftps']]\n</code></pre> <p>A valid url scheme supported by codegen.</p>"},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace","title":"CLINamespace  <code>dataclass</code>","text":"<pre><code>CLINamespace(input: str, select: Sequence[ReFormatFlags] = (TYPE_DATE_TO_STRING, TYPE_LIST_TO_ARRAY, TYPE_INFER_BOOLEANS, TYPE_ARRAY_ENSURE_ITEMS, PATHS_ENSURE_SNAKECASE, PARAM_PARAMTYPE_TO_IN, PARAM_TITLE_TO_NAME), ignore: Sequence[ReFormatFlags] = (), extract: Path | None = None, zip: IO[str] = stdout, openapi: bool = False, serve: tuple[str, int] | None = None, silent: bool = False, threaded: bool = True, diff: bool = False, verbose: bool = False)\n</code></pre> <p>Typings for namespace of <code>companies-house-codegen</code> command-line interface.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>URL of a Companies House Swagger Specification from the Companies House Developer's API Suite. See: companies_house_codegen.constants.CHOAS or https://developer-specs.company-information.service.gov.uk for more info.</p> required <code>Sequence[ReFormatFlags]</code> <p>Space-separated list of rule codes to enable. See, companies_house_codegen.constants.ReFormatFlags for more info on available flags.</p> <code>(TYPE_DATE_TO_STRING, TYPE_LIST_TO_ARRAY, TYPE_INFER_BOOLEANS, TYPE_ARRAY_ENSURE_ITEMS, PATHS_ENSURE_SNAKECASE, PARAM_PARAMTYPE_TO_IN, PARAM_TITLE_TO_NAME)</code> <code>Sequence[ReFormatFlags]</code> <p>Space-separated list of rule codes to disable. Note, ignored rules have higher priority than slected rules from <code>--select</code> flag. See, companies_house_codegen.constants.ReFormatFlags for more info on available flags.</p> <code>()</code> <code>Path | None</code> <p>When specified, save specification files as to a directory.</p> <code>None</code> <code>IO[str]</code> <p>Output as single file. Outputs as to stdout otherwise</p> <code>stdout</code> <code>bool</code> <p>Convert Swagger specification to OpenAPI.</p> <code>False</code> <code>tuple[str, int] | None</code> <p>When specified, creates a local HTTP server. By default, serves on 127.0.0.1:10000. This can be overidden by passing an argument argument  is passed <code>None</code> <code>bool</code> <p>Stop emitting all non-critical output. Error messages will still be emitted (which can silenced by 2&gt;/dev/null).</p> <code>False</code> <code>bool</code> <p>Download syncronously on a single thread. By default, downloads syncronously using multithreading. Useful for debugging.</p> <code>True</code> <code>bool</code> <p>Logs the difference between pre and post formatting. Note, will be ignored if the <code>--silent</code> flag is passed.</p> <code>False</code> <code>bool</code> <p>Use verbose debug logging</p> <code>False</code> Notes <p>Generated using <code>generate_namespace_typing&lt;https://mmurape.github.io/companies-house-codegen/developement/typings_suite/#typings_suite.generate_cli_ns&gt;</code>_</p> See Also <p>https://mmurape.github.io/companies-house-codegen/developement/typings_suite/#typings_suite.generate_cli_ns</p>"},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(input)","title":"<code>input</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(select)","title":"<code>select</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(ignore)","title":"<code>ignore</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(extract)","title":"<code>extract</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(zip)","title":"<code>zip</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(openapi)","title":"<code>openapi</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(serve)","title":"<code>serve</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(silent)","title":"<code>silent</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(threaded)","title":"<code>threaded</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(diff)","title":"<code>diff</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.CLINamespace(verbose)","title":"<code>verbose</code>","text":""},{"location":"api-reference/types/#companies_house_codegen.types.validate_call","title":"validate_call","text":"<pre><code>validate_call(func: AnyCallableT) -&gt; AnyCallableT\n</code></pre> <p>If pydantic is installed, returns <code>pydantic.validate_call(func)</code>, a decorated wrapper around the function that validates the arguments.</p>"},{"location":"api-reference/utils/","title":"utils","text":""},{"location":"api-reference/utils/#companies_house_codegen.utils","title":"utils","text":"<p>Utilities for codegen.</p> <p>Functions:</p> Name Description <code>create_server</code> <p>Helper to create an HTTP server</p> <code>mapping_representer</code> <p>Helper to represent any Mapping as yaml.</p>"},{"location":"api-reference/utils/#companies_house_codegen.utils.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre> <p>Logger for companies_house_codegen.codegen</p>"},{"location":"api-reference/utils/#companies_house_codegen.utils.FileTypeExtension","title":"FileTypeExtension","text":"<pre><code>FileTypeExtension(mode: str = 'r', bufsize: int = -1, encoding: str | None = None, errors: str | None = None, extensions: Iterable[str] | None = None)\n</code></pre> <p>Extension <code>argparse.FileType</code> that adds checking for file extensions.</p>"},{"location":"api-reference/utils/#companies_house_codegen.utils.create_server","title":"create_server","text":"<pre><code>create_server(server_address: tuple[str, int]) -&gt; None\n</code></pre> <p>Helper to create an HTTP server</p>"},{"location":"api-reference/utils/#companies_house_codegen.utils.mapping_representer","title":"mapping_representer","text":"<pre><code>mapping_representer(dumper: SafeRepresenter, data: Mapping[Any, Any]) -&gt; MappingNode\n</code></pre> <p>Helper to represent any Mapping as yaml.</p> Paramaters <p>dumper: SafeRepresenter     A yaml dumper using the <code>yaml.representer.SafeRepresenter</code> mixin data:     the <code>collections.abc.Mapping</code> object to be represented</p> Notes <p>Useful for represnting <code>collection.OrderedDict</code> objects.</p> <p>Returns:</p> Type Description <code>MappingNode</code> <p>a <code>yaml.MappingNode</code> which is used by dumper to represent a mapping</p>"},{"location":"developement/","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated. These are the instructions you need to follow if you want to submit a pull request.</p>"},{"location":"developement/#code-of-conduct","title":"Code of Conduct","text":"<p>Read and comply with this project's Code of Conduct.</p>"},{"location":"developement/#environment-setup","title":"Environment Setup","text":"<ol> <li>Install Python - if you have not already.</li> <li> <p>Fork and git clone this repository run:</p> <pre><code>cd companies-house-codegen # change directory to this repository\n</code></pre> </li> <li> <p>(recommeded) Create and activate virtual environment</p> </li> <li>Install package with <code>dev</code> extras (dependencies) by running <code>pip install \".[dev]\"</code>    or whatever equivalent your chosen package manager uses.</li> </ol>"},{"location":"developement/#coding-style","title":"Coding style","text":"<p>Before writting a single line of code, we recommed that you read and comply with this project's Coding Standards.</p>"},{"location":"developement/#code-quality","title":"Code Quality","text":"<p>Before committing you work you must perform the following code steps to ensure code quality.</p> <ol> <li>Change directory to root of this repository.</li> <li>Lint and format code using <code>ruff</code>.<ol> <li>Run <code>ruff check .</code> to run lint check.</li> <li>If the check fails, try <code>ruff check . --fix</code> or <code>ruff format .</code> to reformat code,   then run <code>ruff check .</code> again.</li> <li>If the check still fails, then you will have to make corrections mannually.</li> </ol> </li> <li>Perform static analysis using <code>mypy</code>.<ol> <li>Run <code>mypy .</code>.</li> <li>If <code>mypy</code> returns any errors you must correct them.</li> </ol> </li> </ol> <p>Note</p> <p>If your pull request fails the <code>mypy</code> or <code>ruff</code> CI pipelines on Github then it may be rejected.</p>"},{"location":"developement/code-of-conduct/","title":"Code of Conduct","text":"<p>This project's code of conduct is derived from The Ruby Community Conduct Guideline</p> <ul> <li>Participants will be tolerant of opposing views.</li> <li>Participants must ensure that their language and actions are free of personal attacks and disparaging personal remarks.</li> <li>When interpreting the words and actions of others, participants should always assume good intentions.</li> <li>Behavior that can be reasonably considered harassment will not be tolerated.</li> </ul>"},{"location":"developement/coding-standards/","title":"Coding Standards","text":""},{"location":"developement/coding-standards/#pep-8","title":"PEP 8","text":"<p>This project follows a superset of the PEP 8 \u2013 Style Guide for Python Code (PEP 8).</p>"},{"location":"developement/coding-standards/#strong-typing","title":"Strong Typing","text":"<p>Strong typing is prefered wherever possible. Prefer using <code>Duration</code> instead of <code>int</code>, etc.</p>"},{"location":"developement/coding-standards/#explicit-types","title":"Explicit Types","text":"<p>All functions must be fully annotated with Type Hints.</p> <p>All classes must be fully annotated with Variable Annotations.</p> <p>May be used wherever <code>typing.cast</code> types are ambiguious.</p>"},{"location":"developement/coding-standards/#explicity-and-namespace-imports","title":"Explicity and namespace imports","text":"<p>Never use wildcard imports. Either import the module or the items you require from the module.</p>"},{"location":"developement/coding-standards/#compatibility","title":"Compatibility","text":"<p>All code must be compatible with Python 3.8.</p>"},{"location":"developement/coding-standards/#deferedpostponed-evaluation-of-annotations","title":"Defered/Postponed Evaluation of Annotations","text":"<p>In the case that defered/postponed evaluation of annotations is required (e.g. when using type annotations that reference type defined later in the file), then use the annotations future statement</p> <pre><code>from __future__ from annotations\n</code></pre> <p>Note</p> <p>This should be the only statement you may need to use.</p>"},{"location":"developement/coding-standards/#union-types","title":"Union Types","text":"<p>Unions should be written using the syntax defined in PEP 604 \u2013 Allow writing union types as <code>X | Y</code>.</p> <p>In the case the unions types are required, use the annotations future statement</p> <pre><code>from __future__ from annotations\n</code></pre>"},{"location":"developement/coding-standards/#logging","title":"Logging","text":"<p>For logging the following rules apply:</p> <ol> <li>Use <code>logging</code> module for logging.</li> <li>Loggers must be declared at the top of the file after imports and global constants.</li> <li>The name of each logger must be <code>__name__</code>.</li> <li>Do not set log level of named loggers.</li> <li>Never log using the root logger.</li> <li>Do not share loggers between modules.</li> <li>Loggers stream must be set to <code>stdout</code>;    they must only stream to the <code>stderr</code> (default) stream.</li> </ol> <p>Here is an example of a logger in a module file.</p> <pre><code># Correct\nimport logging\n\nlogger = logging.getLogger(__name__)\nlogger.debug(f\"Created logger for {__name__}\")\n</code></pre>"},{"location":"developement/coding-standards/#documentation","title":"Documentation","text":""},{"location":"developement/coding-standards/#python-docstrings","title":"Python Docstrings","text":"<p>All functions, classes and constants (class and global) must be documented using docstrings as standardized in PEP 287.</p> <p>Docstring must follow the numpydoc standards which uses re-structured text (reST) syntax.</p>"},{"location":"developement/coding-standards/#class-variables","title":"Class Variables","text":"<p>In the Style guide for numpydoc there is an ambiguity in how static/class variables are to be documented.</p> <p>For class variables, use the convention for Documenting constants</p>"},{"location":"developement/coding-standards/#file-documentation","title":"File Documentation","text":"<p>Documentation files must be written in the <code>/docs/</code> folder.</p> <p>In Python the recommended file format for documentation is reST. However, due to the ubiquity of the Markdown format, it makes more logical sense to Markdown instead. Thus, all file documentation will be written in Markdown.</p> <p>MkDocs using the Material for MkDocs theme, and the mkdocstrings extension.</p> <p>Note</p> <p>I initially considered using between Sphinx with the MyST Parser extension, and the Furo theme; however I decided to go with MkDoc due to how popular and recogizable it has become.</p>"},{"location":"developement/coding-standards/#static-analysis","title":"Static Analysis","text":"<p>mypy will be used to perform static analysis.</p> <p>Tip</p> <p>If you wish, static analysis maybe performed using <code>ty</code> or <code>pyrefly</code>. Both these tools also have come with a language server, making them convient to use in an editor/IDE. However, it is worth noting that these tools is still in Alpha and may have some bugs so rely primarily on <code>mypy</code>.</p>"},{"location":"developement/coding-standards/#formatting","title":"Formatting","text":"<p>Use <code>ruff</code> for formatting.</p>"},{"location":"developement/install-python/","title":"Install Python","text":"<p>The following describes how to set up your development environment for working on this project. For this specific tutorial we will be installing Python 3.8, but you can install any version you like (recommend installing the latest).</p>"},{"location":"developement/install-python/#pyenv","title":"<code>pyenv</code>","text":"<p>pyenv is a Python version manager written in shell script; it allows you to install and manage different version of python. See this guide on installation. Once installed simply run:</p> <pre><code>pyenv install 3.8\n</code></pre> <p>Tip</p> <p>See this for more info on usage.</p>"},{"location":"developement/install-python/#uv","title":"<code>uv</code>","text":"<p>Tip</p> <p>This is the recommended way of installing Python.</p> <p>uv is an Python package and project manager. It has many useful features, including the ability to download and manage different Python versions.</p> <p>Installation</p> <p>See this guide on installation.</p> <p>To install - say - Python 3.8, run:</p> <pre><code>uv python install 3.8\n</code></pre> <p>Usage</p> <p>See this for more info on usage.</p>"},{"location":"developement/install-python/#unixmacos","title":"Unix/MacOs","text":"<p>If you are using a Unix-based (like Linux) or Unix-like (like MacOS) system, you can find Python in your prefered package manager.</p> UbuntuFedoraArchmacOs <p>Tip</p> <p>On some version of Ubuntu you may need to use the deadsnakes PPA repository to install Python.</p> <p>If you are on such a version, run this command first:</p> <pre><code>sudo apt-get install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\n</code></pre> <p>Then run the below:</p> <pre><code>sudo apt-get update\nsudo apt-get install python3.8 # install Python 3.8\n</code></pre> <pre><code>sudo dnf install python3.8\n</code></pre> <p>Tip</p> <p>If you have an AUR helper like <code>yay</code>, you can specify the specific Python package you want in the Arch User Repository (AUR): <code>yay -S python38</code></p> <pre><code>sudo pacman -S python3.8\n</code></pre> <p>Homebrew Installation</p> <p>If you do not have Homebrew installed on your OS X terminal, you can install it using the following command:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre> <pre><code>brew install python3.8\n</code></pre>"},{"location":"developement/install-python/#windows","title":"Windows","text":"<p>See this guide on how to install Python on Windows.</p>"},{"location":"developement/typings_suite/","title":"Typings Suite","text":"<p>This suite is meant to assist in typing and type checking for the <code>companies-house-codegen</code> package.</p> <p>options:     show_submodules: true</p>"},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns","title":"generate_cli_ns","text":"<p>Generator for <code>CLINamespace</code>.</p> <p>Functions:</p> Name Description <code>dump_struct_signature</code> <p>Used for testing the signature of :class:<code>companies_house_codegen.argument.CLINamespace</code>.</p> <code>generate_namespace_typing</code> <p>Generates a typed namespace class for a given argparser.</p>"},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns.dump_struct_signature","title":"dump_struct_signature","text":"<pre><code>dump_struct_signature(cls: type) -&gt; str\n</code></pre> <p>Used for testing the signature of :class:<code>companies_house_codegen.argument.CLINamespace</code>.</p>"},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns.generate_namespace_typing","title":"generate_namespace_typing","text":"<pre><code>generate_namespace_typing(argparser: ArgumentParser, name: str, *, type_aliases: Iterable[tuple[type[Any], str]] | None = None, default_aliases: Iterable[tuple[Any, str]] | None = None, description: str | None = None) -&gt; str\n</code></pre> <p>Generates a typed namespace class for a given argparser.</p> <p>Parameters:</p> Name Type Description Default <code>ArgumentParser</code> <p>the argparser whose namespace is to be produced</p> required <code>str</code> <p>name of newly created namespace</p> required <code>Iterable[tuple[type[Any], str]] | None</code> <p>aliases Action.type to one type to an arbitrary string representation</p> <code>None</code> <code>Iterable[tuple[Any, str]] | None</code> <p>aliases a Action.default value to an arbitrary string representation</p> <code>None</code> <code>str | None</code> <p>description of namespace In Numpydoc style, this corresponds to the <code>short summary&lt;https://numpydoc.readthedocs.io/en/latest/format.html#short-summary&gt;</code>, <code>deprecation warning&lt;https://numpydoc.readthedocs.io/en/latest/format.html#short-summary&gt;</code>, and <code>extended summary&lt;https://numpydoc.readthedocs.io/en/latest/format.html#extended-summary&gt;</code>_ sections.</p> <code>None</code> <p>Examples:</p> <p>This was used to generate <code>companies_house_codegen.argument.CLINamespace&lt;https://mmurape.github.io/companies-house-codegen/api-reference/argument/#companies_house_codegen.argument.CLINamespace&gt;</code>_</p> <pre><code>&gt;&gt;&gt; import sys\n... from companies_house_codegen.argument import CLIArgumentParser\n... from companies_house_codegen.constants import ReFormatFlags\n... from tests.typings_suite.generate_cli_ns import generate_namespace_typing\n... ns_typing = generate_namespace_typing(\n...     CLIArgumentParser(), 'CLINamespace',\n...     default_aliases=[\n...         (sys.stdout, 'sys.stdout'),\n...         (tuple(ReFormatFlags), '('+', '.join(str(f) for f in ReFormatFlags)+')')\n...     ],\n...     description=\"Typings for namespace of `companies-house-codegen` \"\n...                 \"command-line interface.\"\n... )\n... print(ns_typing)\n</code></pre>"},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns.generate_namespace_typing(argparser)","title":"<code>argparser</code>","text":""},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns.generate_namespace_typing(name)","title":"<code>name</code>","text":""},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns.generate_namespace_typing(type_aliases)","title":"<code>type_aliases</code>","text":""},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns.generate_namespace_typing(default_aliases)","title":"<code>default_aliases</code>","text":""},{"location":"developement/typings_suite/#typings_suite.generate_cli_ns.generate_namespace_typing(description)","title":"<code>description</code>","text":""},{"location":"developement/virtual-environments/","title":"Python Virtual Environments","text":"<p>It is recommended to create a virtual environment to isolate packages you install for each project.</p> <p>Note</p> <p>If you already know about virtual environments, or you do not mind installing Python packages system-wide, you may skip this tutorial.</p>"},{"location":"developement/virtual-environments/#what-is-a-virtual-environment","title":"What Is A Virtual Environment","text":"<p>In Python programming, a virtual environment is an a directory containing various files that can be used to create the isolated environment. This allows you to manage project specific dependencies without interfering with other projects or the original Python installation.</p>"},{"location":"developement/virtual-environments/#creating-virtual-environment","title":"Creating Virtual Environment","text":"<p>There are multiple tools that can be used to create a virtual environment in Python. Here are a few of them.</p>"},{"location":"developement/virtual-environments/#creating-virtual-environment-using-virtualenv","title":"Creating Virtual Environment Using <code>virtualenv</code>","text":"<p>virtualenv is a third party CLI tool that creates Python virtual environments. It is very similar to venv.</p> <p>First you must install virtualenv:</p> <p>=== \"pip\"     <pre><code>pip install virtualenv\n</code></pre></p> <p>=== \"pipx\"     <pre><code># install in an isolated environment\npipx install virtualenv\n</code></pre></p> <p>To create a new virtual environment simply run the following:</p> <pre><code># creates a virtual environment stored in the directory `./venv/`\npython -m venv venv\n</code></pre> <p>Once you\u2019ve created a virtual environment, you may activate it.</p> Unix/macOSWindows <pre><code>source ./venv/bin/activate\n</code></pre> <pre><code>.\\venv\\Scripts\\activate.bat\n</code></pre> <p>For Python 3.3+, it is generally recommended to use venv over virtualenv.</p>"},{"location":"developement/virtual-environments/#creating-virtual-environment-using-venv","title":"Creating Virtual Environment Using <code>venv</code>","text":"<p>Introduce in Python 3.3, venv is a Python standard library module that can be used to create virtual Python environments. </p> <p>To create a new virtual environment simply run the following:</p> <pre><code># creates a virtual environment stored in the directory `./venv/`\npython -m venv venv\n</code></pre> <p>Once you\u2019ve created a virtual environment, you may activate it.</p> Unix/MacOSWindows <pre><code>source ./venv/bin/activate\n</code></pre> <pre><code>.\\venv\\Scripts\\activate.bat\n</code></pre> <p>You can manage python packages in a <code>venv</code> virtual environment using pip</p> <p><code>venv</code> is the most convient way of creating virtual environments.</p>"},{"location":"developement/virtual-environments/#creating-virtual-environment-using-uv","title":"Creating Virtual Environment Using <code>uv</code>","text":"<p>Tip</p> <p><code>uv</code> is considered to be the best tool for managing python environments.</p> <p>uv is an exceptionally Python package and project manager. Amongst its many tool is <code>uv venv</code>, a tool that functionally equivalently to <code>venv</code> in usage; most of what applies to <code>venv</code> applies to <code>uv venv</code>. Note that you should use <code>uv pip</code> over <code>pip</code> when using an environment created by <code>uv env</code>. See more information at the official docs</p> <p>Environment Naming Conventions</p> <p>If you are using Astral's (the creators of <code>uv</code>) ecosystem name whatever environmets you create <code>.venv</code> rather than <code>venv</code> to make them discoverable</p>"}]}